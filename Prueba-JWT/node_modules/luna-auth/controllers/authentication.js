'use strict'

const passport = require('koa-passport')
const compose = require('koa-compose')

const {
  validateRegistrationInput,
  validateAdminRegistrationInput,
  validateRegistrationInfoQuery,
  validateForgotPasswordInput,
  validateResetPasswordInput
} = require('../validation/authentication')

module.exports = {
  login: compose([
    (ctx, next) => {
      return passport.authenticate(
        'local',
        { session: false },
        (err, user, info) => {
          if (err) {
            luna.eventHub.emit('auth.auth.error', {
              error: err,
              provider: 'local'
            })
            return ctx.badImplementation()
          }

          if (!user) {
            luna.eventHub.emit('auth.auth.error', {
              error: new Error(info.message),
              provider: 'local'
            })
            return ctx.badRequest(info.message)
          }

          ctx.state.user = user

          luna.eventHub.emit('auth.auth.success', {
            user,
            provider: 'local'
          })

          return next()
        }
      )(ctx, next)
    },
    (ctx) => {
      const { user } = ctx.state
      ctx.body = {
        token: luna.services.token.createJwtToken(user),
        user: luna.services.user.sanitizeUser(ctx.state.user) // TODO: fetch more detailed info
      }
    }
  ]),

  renewToken(ctx) {
    const { token } = ctx.request.body

    if (token === undefined) {
      return ctx.badRequest('Missing token')
    }

    const { isValid, payload } = luna.services.token.decodeJwtToken(token)

    if (!isValid) {
      return ctx.badRequest('Invalid token')
    }

    ctx.body = {
      data: {
        token: luna.services.token.createJwtToken({ id: payload.id })
      }
    }
  },

  async registrationInfo(ctx) {
    try {
      await validateRegistrationInfoQuery(ctx.request.query)
    } catch (err) {
      return ctx.badRequest('QueryError', err)
    }

    const { registrationToken } = ctx.request.query

    const registrationInfo = await luna.services.user.findRegistrationInfo(
      registrationToken
    )

    if (!registrationInfo) {
      return ctx.badRequest('Invalid registrationToken')
    }

    ctx.body = { data: registrationInfo }
  },

  async register(ctx) {
    const input = ctx.request.body

    try {
      await validateRegistrationInput(input)
    } catch (err) {
      return ctx.badRequest('ValidationError', err)
    }

    const user = await luna.services.user.register(input)
    ctx.body = {
      data: {
        token: luna.services.token.createJwtToken(user),
        user: luna.services.user.sanitizeUser(user)
      }
    }
  },

  async registerAdmin(ctx) {
    const input = ctx.request.body

    try {
      await validateAdminRegistrationInput(input)
    } catch (err) {
      return ctx.badRequest('ValidationError', err)
    }

    const hasAdmin = await luna.services.user.exists()

    if (hasAdmin) {
      return ctx.badRequest('You cannot register a new super admin')
    }

    const superAdminRole = await luna.services.role.getSuperAdmin()

    if (!superAdminRole) {
      throw new Error(
        "Cannot register the first admin because the super admin role doesn't exist."
      )
    }

    const user = await luna.services.user.create({
      ...input,
      registrationToken: null,
      isActive: true,
      roles: superAdminRole ? [superAdminRole.id] : []
    })

    ctx.body = {
      data: {
        token: luna.services.token.createJwtToken(user),
        user: luna.services.user.sanitizeUser(user)
      }
    }
  },

  async forgotPassword(ctx) {
    const input = ctx.request.body

    try {
      await validateForgotPasswordInput(input)
    } catch (err) {
      return ctx.badRequest('ValidationError', err)
    }

    luna.services.auth.forgotPassword(input)

    ctx.status = 204
  },

  async resetPassword(ctx) {
    const input = ctx.request.body

    try {
      await validateResetPasswordInput(input)
    } catch (err) {
      return ctx.badRequest('ValidationError', err)
    }

    const user = await luna.services.auth.resetPassword(input)

    ctx.body = {
      data: {
        token: luna.services.token.createJwtToken(user),
        user: luna.services.user.sanitizeUser(user)
      }
    }
  }
}
